"use strict";


var PI = Math.PI;
var PI2 = PI * 2;
var RANGLE = PI / 2;



var FULL_ANGLE = 3600;
var FLAT_ANGLE = 1800;
var RIGHT_ANGLE = 900;

// 用定点数代替浮点数，保证不同机器没有误差
// 这样就服务器就不用写游戏逻辑了哈哈哈哈哈
var PRECISION = 10000;

// 0.0°至90.0°的正弦（乘以PRECISION）
var DEGREE_SIN = new Int32Array([
0,17,34,52,69,87,104,122,139,157,174,191,209,226,244,261,279,296,314,331,348,366,383,401,418,436,453,471,488,505,523,540,558,575,593,610,627,645,662,680,697,714,732,749,767,784,801,819,836,854,
871,888,906,923,941,958,975,993,1010,1027,1045,1062,1079,1097,1114,1132,1149,1166,1184,1201,1218,1236,1253,1270,1287,1305,1322,1339,1357,1374,1391,1409,1426,1443,1460,1478,1495,1512,1529,1547,1564,1581,1598,1616,1633,1650,1667,1684,1702,1719,
1736,1753,1770,1788,1805,1822,1839,1856,1873,1890,1908,1925,1942,1959,1976,1993,2010,2027,2044,2062,2079,2096,2113,2130,2147,2164,2181,2198,2215,2232,2249,2266,2283,2300,2317,2334,2351,2368,2385,2402,2419,2436,2453,2469,2486,2503,2520,2537,2554,2571,
2588,2605,2621,2638,2655,2672,2689,2706,2722,2739,2756,2773,2789,2806,2823,2840,2856,2873,2890,2907,2923,2940,2957,2973,2990,3007,3023,3040,3056,3073,3090,3106,3123,3139,3156,3173,3189,3206,3222,3239,3255,3272,3288,3305,3321,3338,3354,3370,3387,3403,
3420,3436,3452,3469,3485,3502,3518,3534,3551,3567,3583,3599,3616,3632,3648,3665,3681,3697,3713,3729,3746,3762,3778,3794,3810,3826,3842,3859,3875,3891,3907,3923,3939,3955,3971,3987,4003,4019,4035,4051,4067,4083,4099,4115,4131,4146,4162,4178,4194,4210,
4226,4241,4257,4273,4289,4305,4320,4336,4352,4368,4383,4399,4415,4430,4446,4461,4477,4493,4508,4524,4539,4555,4570,4586,4601,4617,4632,4648,4663,4679,4694,4710,4725,4740,4756,4771,4786,4802,4817,4832,4848,4863,4878,4893,4909,4924,4939,4954,4969,4984,
4999,5015,5030,5045,5060,5075,5090,5105,5120,5135,5150,5165,5180,5195,5210,5224,5239,5254,5269,5284,5299,5313,5328,5343,5358,5372,5387,5402,5417,5431,5446,5461,5475,5490,5504,5519,5533,5548,5562,5577,5591,5606,5620,5635,5649,5664,5678,5692,5707,5721,
5735,5750,5764,5778,5792,5807,5821,5835,5849,5863,5877,5891,5906,5920,5934,5948,5962,5976,5990,6004,6018,6032,6045,6059,6073,6087,6101,6115,6129,6142,6156,6170,6184,6197,6211,6225,6238,6252,6266,6279,6293,6306,6320,6333,6347,6360,6374,6387,6401,6414,
6427,6441,6454,6467,6481,6494,6507,6520,6534,6547,6560,6573,6586,6600,6613,6626,6639,6652,6665,6678,6691,6704,6717,6730,6743,6755,6768,6781,6794,6807,6819,6832,6845,6858,6870,6883,6896,6908,6921,6934,6946,6959,6971,6984,6996,7009,7021,7033,7046,7058,
7071,7083,7095,7107,7120,7132,7144,7156,7169,7181,7193,7205,7217,7229,7241,7253,7265,7277,7289,7301,7313,7325,7337,7349,7360,7372,7384,7396,7408,7419,7431,7443,7454,7466,7477,7489,7501,7512,7524,7535,7547,7558,7569,7581,7592,7604,7615,7626,7637,7649,
7660,7671,7682,7693,7705,7716,7727,7738,7749,7760,7771,7782,7793,7804,7815,7826,7836,7847,7858,7869,7880,7890,7901,7912,7922,7933,7944,7954,7965,7975,7986,7996,8007,8017,8028,8038,8048,8059,8069,8079,8090,8100,8110,8120,8131,8141,8151,8161,8171,8181,
8191,8201,8211,8221,8231,8241,8251,8260,8270,8280,8290,8300,8309,8319,8329,8338,8348,8358,8367,8377,8386,8396,8405,8415,8424,8433,8443,8452,8461,8471,8480,8489,8498,8508,8517,8526,8535,8544,8553,8562,8571,8580,8589,8598,8607,8616,8625,8633,8642,8651,
8660,8668,8677,8686,8694,8703,8712,8720,8729,8737,8746,8754,8763,8771,8779,8788,8796,8804,8813,8821,8829,8837,8845,8853,8862,8870,8878,8886,8894,8902,8910,8917,8925,8933,8941,8949,8957,8964,8972,8980,8987,8995,9003,9010,9018,9025,9033,9040,9048,9055,
9063,9070,9077,9085,9092,9099,9106,9114,9121,9128,9135,9142,9149,9156,9163,9170,9177,9184,9191,9198,9205,9211,9218,9225,9232,9238,9245,9252,9258,9265,9271,9278,9284,9291,9297,9304,9310,9316,9323,9329,9335,9342,9348,9354,9360,9366,9372,9378,9384,9390,
9396,9402,9408,9414,9420,9426,9432,9438,9443,9449,9455,9460,9466,9472,9477,9483,9488,9494,9499,9505,9510,9515,9521,9526,9531,9537,9542,9547,9552,9557,9563,9568,9573,9578,9583,9588,9593,9598,9602,9607,9612,9617,9622,9626,9631,9636,9640,9645,9650,9654,
9659,9663,9668,9672,9677,9681,9685,9690,9694,9698,9702,9707,9711,9715,9719,9723,9727,9731,9735,9739,9743,9747,9751,9755,9759,9762,9766,9770,9774,9777,9781,9785,9788,9792,9795,9799,9802,9806,9809,9812,9816,9819,9822,9826,9829,9832,9835,9838,9841,9845,
9848,9851,9854,9857,9859,9862,9865,9868,9871,9874,9876,9879,9882,9884,9887,9890,9892,9895,9897,9900,9902,9905,9907,9909,9912,9914,9916,9918,9921,9923,9925,9927,9929,9931,9933,9935,9937,9939,9941,9943,9945,9947,9948,9950,9952,9953,9955,9957,9958,9960,
9961,9963,9964,9966,9967,9969,9970,9971,9973,9974,9975,9976,9978,9979,9980,9981,9982,9983,9984,9985,9986,9987,9988,9988,9989,9990,9991,9991,9992,9993,9993,9994,9995,9995,9996,9996,9997,9997,9997,9998,9998,9998,9999,9999,9999,9999,9999,9999,9999,9999,
10000]);

var DEG_RAD = 1800 / PI, RAD_DEG = PI / 1800;

function sin(deg) {
    if (deg < 0) return -sin(deg);
    
    deg %= 3600;
    return (
        deg <= 1800
            ? deg <= 900
                ? DEGREE_SIN[deg]
                : DEGREE_SIN[1800-deg]
            : deg <= 2700
                ? -DEGREE_SIN[deg-1800]
                : -DEGREE_SIN[3600-deg]
    );
}

function cos(deg) {
    if (deg < 0) deg = -deg;
    deg %= 3600;

    return (
        deg <= 1800
            ? deg <= 900
                ? DEGREE_SIN[900-deg]
                : -DEGREE_SIN[deg-900]
            : deg <= 2700
                ? -DEGREE_SIN[2700-deg]
                : DEGREE_SIN[deg-2700]
    );        
}

// 太麻烦不想写，暂时偷懒
// 姑且认为atan2的能精确到0.1°
function atan2(y, x) {
    var d = Math.floor(Math.atan2(y, x) * DEG_RAD);
    if (d < 0) d += FULL_ANGLE;
    return d;
}


function Vec2(x, y) {
    this.x = x;
    this.y = y;
}

function vec2(x, y) {
    return new Vec2(x, y);
}

function FP(x) {
    return Math.trunc(x / PRECISION);
}
function trunc(x) {
    return Math.trunc(x);
}

function sqr(x) {
    return x*x;
}
function dist2d2(p, q) {
    return sqr(p.x - q.x) + sqr(p.y - q.y);
}
function dist2d(p, q) {
    return trunc(Math.sqrt(dist2d2(p, q)));
}
function len2d2(p) {
    return p.x * p.x + p.y * p.y;
}
function len2d(p) {
    return trunc(Math.sqrt(len2d2(p)));
}
function plus2d(p, q) {
    return vec2(p.x + q.x, p.y + q.y);
}
function minus2d(p, q) {
    return vec2(p.x - q.x, p.y - q.y);
}
function scale2d(p, k) {
    return vec2(p.x * k >>0, p.y * k >>0);
}
function scale2dP(p, k) {
    return vec2(FP(p.x * k), FP(p.y * k));
}
function div2d(p, k) {
    return vec2(trunc(p.x / k), trunc(p.y / k));
}
function scaleTo2d(p, len) {
    var lenp = len2d(p);
    return vec2(trunc(p.x * len / lenp), trunc(p.y * len / lenp));
}
function normalize2d(p) {
    return scale2d(p, trunc(PRECISION / len2d(p)));
}
function dot2d(p, q) {
    return p.x * q.x + p.y * q.y;
}
function clockwise_area(p, q) {
    return q.y * p.x - p.y * q.x;
}

function norm_from_angle(a) {
    return vec2(cos(a), sin(a));
}